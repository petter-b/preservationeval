name: Python Package CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, labeled]  # Test on every PR change + releases on label
  workflow_dispatch: # Allows manual runs
    inputs:
      release_type:
        description: 'Release type'
        required: false
        default: 'none'
        type: choice
        options:
        - none
        - release-candidate
        - release-patch
        - release-minor
        - release-major

jobs:
  test:
    runs-on: ubuntu-latest
    # Run tests on PRs, push to main, and manual dispatch
    if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        python-version: ["3.13", "3.12", "3.11"]

    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js  # Required for validation testing against JavaScript reference
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
      with:
        node-version: '22'

    - name: Install package and dependencies
      run: |
        python -m pip install --upgrade pip
        echo "Current directory: $(pwd)"
        echo "Directory contents: $(ls -la)"
        echo "Python path: $PYTHONPATH"
        python -m pip install -e ".[test]" -v
        echo "Post-install contents:"
        ls -R src/preservationeval/
        python -m pip install pre-commit

    - name: Cache pre-commit hooks
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Run pre-commit
      env:
        SKIP: no-commit-to-branch
      run: |
        pre-commit run --all-files

    - name: Run tests
      run: |
        pytest --cov

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  release:
    runs-on: ubuntu-latest
    environment: production
    needs: test
    if: |
      contains(github.event.label.name, 'release-candidate') ||
      contains(github.event.label.name, 'release-patch') ||
      contains(github.event.label.name, 'release-minor') ||
      contains(github.event.label.name, 'release-major') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.release_type != 'none')

    permissions:
      contents: write
      pull-requests: write

    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: "3.13"

      - name: Set up Node.js  # for semver
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '22'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine semver
          python -m pip install -e ".[test]" -v
          python -m pip install pre-commit

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            RELEASE_TYPE="${{ github.event.label.name }}"
          fi
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "Detected release type: $RELEASE_TYPE"

      - name: Validate before release
        run: |
          if ! command -v npx &> /dev/null; then
            echo "Error: npx command not found"
            exit 1
          fi
          if [[ ! -f "./setup.py" ]]; then
            echo "Error: setup.py not found"
            exit 1
          fi
          CURRENT_VERSION=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null | sed 's/^v//' || echo "0.0.0")
          if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format from git: $CURRENT_VERSION"
            exit 1
          fi
          echo "Validation passed. Current version: $CURRENT_VERSION"

      # =========================
      # Release Candidate (TestPyPI)
      # =========================
      - name: Build and (optionally) Publish Release Candidate
        id: build_rc
        if: steps.release_type.outputs.release_type == 'release-candidate'
        run: |
          BASE_VERSION=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null | sed 's/^v//' || echo "0.0.0")
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RC_NUMBER=$(date +%s)
            RC_VERSION="${BASE_VERSION}rc${RC_NUMBER}"
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
            RC_VERSION="${BASE_VERSION}rc${PR_NUMBER}"
          fi
          echo "Building Release Candidate version: ${RC_VERSION}"

          mkdir -p src/preservationeval
          echo "version = '${RC_VERSION}'" > src/preservationeval/_version.py

          rm -f src/preservationeval/tables.py
          python -m build

          ! tar -tvf dist/*.tar.gz | grep '/tables.py'
          twine check dist/*

          if [[ -n "${{ secrets.TEST_PYPI_API_TOKEN }}" ]]; then
            twine upload --repository testpypi dist/* --username __token__ --password ${{ secrets.TEST_PYPI_API_TOKEN }}
            echo "✅ RC ${RC_VERSION} uploaded to TestPyPI"
          else
            echo "TEST_PYPI_API_TOKEN not set; skipping TestPyPI upload"
          fi

          rm src/preservationeval/_version.py
          echo "rc_version=${RC_VERSION}" >> $GITHUB_OUTPUT

      # =========================
      # Production Release (PyPI)
      # =========================
      - name: Build, Publish Production Release to PyPI, and Create GH Release
        id: build_prod
        if: steps.release_type.outputs.release_type == 'release-patch' || steps.release_type.outputs.release_type == 'release-minor' || steps.release_type.outputs.release_type == 'release-major'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          CURRENT_VERSION=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null | sed 's/^v//' || echo "0.0.0")
          LATEST_TAG=$(git describe --tags --abbrev=0 --match="v*" 2>/dev/null || echo "")

          if [[ -z "$LATEST_TAG" ]] && [[ "$CURRENT_VERSION" == "0.0.0" ]]; then
            echo "🎉 First release detected"
            if [[ "${{ steps.release_type.outputs.release_type }}" == "release-minor" ]]; then
              NEW_VERSION="0.1.0"
            elif [[ "${{ steps.release_type.outputs.release_type }}" == "release-major" ]]; then
              NEW_VERSION="1.0.0"
            else
              NEW_VERSION="0.0.1"
            fi
          else
            echo "📈 Bumping existing version: $CURRENT_VERSION"
            if [[ "${{ steps.release_type.outputs.release_type }}" == "release-patch" ]]; then
              NEW_VERSION=$(npx semver -i patch $CURRENT_VERSION)
            elif [[ "${{ steps.release_type.outputs.release_type }}" == "release-minor" ]]; then
              NEW_VERSION=$(npx semver -i minor $CURRENT_VERSION)
            elif [[ "${{ steps.release_type.outputs.release_type }}" == "release-major" ]]; then
              NEW_VERSION=$(npx semver -i major $CURRENT_VERSION)
            fi
          fi

          echo "Version: ${CURRENT_VERSION} → ${NEW_VERSION}"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git checkout ${{ github.head_ref }}
            git add .
            git commit -m "chore: Prepare for release ${NEW_VERSION}" || echo "No changes to commit"
            git push origin ${{ github.head_ref }}
            echo "Attempting to merge PR..."
            if ! gh pr merge ${{ github.event.pull_request.number }} --squash --delete-branch; then
              echo "❌ Auto-merge failed. Please merge manually and re-run."
              exit 1
            fi
            git checkout main
            git pull origin main
          fi

          # Create and push tag (used by setup.py for version)
          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"

          # Build package
          rm -f src/preservationeval/tables.py
          python -m build

          # Verify contents and metadata
          ! tar -tvf dist/*.tar.gz | grep '/tables.py'
          twine check dist/*

          # Test built artifact before uploading
          python -m venv test_env
          source test_env/bin/activate
          python -c "import glob; print(glob.glob('dist/*.gz')[0]+'[test]')" | xargs pip install -v
          pytest -v

          # Upload to PyPI
          TWINE_USERNAME=__token__ TWINE_PASSWORD=${{ secrets.PYPI_API_TOKEN }} twine upload dist/*.gz

          # Verify from PyPI
          sleep 60
          pip uninstall -y preservationeval
          pip install --no-cache-dir "preservationeval[test]"
          pytest -v

          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "🚀 Production release ${NEW_VERSION} published to PyPI successfully"

      - name: Create GitHub Release
        if: steps.release_type.outputs.release_type == 'release-patch' || steps.release_type.outputs.release_type == 'release-minor' || steps.release_type.outputs.release_type == 'release-major'
        uses: ghalactic/github-release-from-tag@cebdacac0ccd08933b8e7f278f4123723ad978eb # v5
        with:
          prerelease: false
          draft: false

      - name: Summary
        run: |
          echo "## 🎯 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.release_type.outputs.release_type }}" == "release-candidate" ]]; then
            RC_VERSION="${{ steps.build_rc.outputs.rc_version }}"
            echo "- Type: Release Candidate" >> $GITHUB_STEP_SUMMARY
            echo "- Version: \`${RC_VERSION}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Published to: TestPyPI (if token present)" >> $GITHUB_STEP_SUMMARY
          else
            NEW_VERSION="${{ steps.build_prod.outputs.new_version }}"
            echo "- Type: Production Release" >> $GITHUB_STEP_SUMMARY
            echo "- Version: \`${NEW_VERSION}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Tag: \`v${NEW_VERSION}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Published to: PyPI" >> $GITHUB_STEP_SUMMARY
            echo "- GitHub Release: created" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All tests passed and release completed successfully!" >> $GITHUB_STEP_SUMMARY