[project]
name = "preservationeval"
version = "0.1.0"
authors = [{ name = "Petter Blomberg", email = "petter.blomberg@gmail.com" }]
description = "A Python module to mimic the calculations done by the Dew Point Calculator from Image Permanence Institute (IPI)."
requires-python = ">=3.11"
license = { text = "MIT" }
keywords = ["preservation", "climate", "numpy"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]
dependencies = ["numpy>=1.24.0", "requests>=2.31.0"]
readme = "README.md"

[project.optional-dependencies]
# Testing tools
test = [
    "pytest>=7.4.0",
    "pytest-mypy>=0.10.3",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
]
# Code quality tools
lint = [
    "mypy>=1.13.0",      # Match your pre-commit hook version
    "black>=24.10.0",    # Match your pre-commit hook version
    "ruff>=0.7.3",       # Match your pre-commit hook version
    "pre-commit>=3.6.0", # Current version
]
# Performance tools
profile = ["memory_profiler>=0.61.0"]
# Full development environment (includes all above)
dev = ["preservationeval[test,lint,profile]"]

[project.scripts]
preservationeval = "preservationeval.__main__:main"

[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=45",
    "wheel",
    "numpy>=1.24.0",    # Needed during build
    "requests>=2.31.0", # Needed for downloading
]

[tool.setuptools]
package-data = { preservationeval = [".pre-commit-config.yaml"] }

[project.urls]
Homepage = "https://github.com/petter-b/preservationeval"
Documentation = "https://github.com/petter-b/preservationeval#readme"
Repository = "https://github.com/petter-b/preservationeval.git"
Issues = "https://github.com/petter-b/preservationeval/issues"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
norecursedirs = ["__pycache__", "tests/wip"]
addopts = "--mypy --cov=preservationeval --cov-report=xml --cov-report=html"
pythonpath = [".", "tests"]
markers = [
    "unit: marks unit tests that test individual components in isolation",
    "integration: marks integration tests that test component interactions",
    "validation: marks tests that validate against JavaScript reference implementation",
    "slow: marks tests that take longer to execute",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
files = ["src/**/*.py", "tests/**/*.py"]

[[tool.mypy.overrides]]
module = ["numpy.*", "requests.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = ["misc"]

[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".venv",
    "build",
    "dist",
    "tests/data",
    "docs/generated",
]
typeCheckingMode = "basic"
reportMissingTypeStubs = false
pythonVersion = "3.11"
pythonPlatform = "All"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = "tests/data/.*"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "D",  # pydocstyle
    "E",  # pycodestyle
    "F",  # pyflakes
    "B",  # flake8-bugbear
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "S",  # flake8-bandit
    "C4", # flake8-comprehensions
]
ignore = ["D203", "D213"]

[tool.ruff.lint.pydocstyle]
convention = "google"

# Optional: Add these sections if you need them
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "D103", # Missing docstring in public function
    "S101", # Use of assert detected
]
